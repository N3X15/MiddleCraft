// AUTOMATICALLY GENERATED BY MIDDLECRAFT
/* Allows plugins to access server functions without needing to link the actual server Jar. */
package net.minecraft.server;

public abstract class NetworkManager {
	// FIELDS
	public static java.lang.Object threadSyncObject;
	public static int numReadThreads;
	public static int numWriteThreads;
	public int chunkDataSendCounter;
	private java.lang.Object sendQueueLock;
	private java.net.Socket networkSocket;
	private java.net.SocketAddress field_12032;
	private java.io.DataInputStream socketInputStream;
	private java.io.DataOutputStream socketOutputStream;
	private boolean isRunning;
	private java.util.List readPackets;
	private java.util.List dataPackets;
	private java.util.List chunkDataPackets;
	private NetHandler netHandler;
	private boolean isServerTerminating;
	private java.lang.Thread writeThread;
	private java.lang.Thread readThread;
	private boolean isTerminating;
	private java.lang.String terminationReason;
	private java.lang.Object[] field_20176;
	private int timeSinceLastRead;
	private int sendQueueByteLength;
	private int field_20175;
	
	// METHODS
	
	/**
	 * Checks timeouts and processes all pending read packets.
	 */
	public abstract void processReadPackets();
	
	/**
	 * Sets the NetHandler for this NetworkManager. Server-only.
	 */
	public abstract void setNetHandler(NetHandler a);
	
	/**
	 * Adds the packet to the correct send queue (chunk data packets go to a separate queue).
	 */
	public abstract void addToSendQueue(Packet a);
	
	/**
	 * Returns the socket address of the remote side. Server-only.
	 */
	public abstract java.net.SocketAddress getRemoteAddress();
	
	/**
	 * Server-only method to shut down the network.
	 */
	public abstract void serverShutdown();
	
	/**
	 * Returns the number of chunk data packets waiting to be sent.
	 */
	public abstract int getNumChunkDataPackets();

}
