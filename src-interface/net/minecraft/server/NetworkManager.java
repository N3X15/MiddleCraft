// AUTOMATICALLY GENERATED BY MIDDLECRAFT
/* Allows plugins to access server functions without needing to link the actual server Jar. */
package net.minecraft.server;

public abstract class NetworkManager{
	// FIELDS
	public static final java.lang.Object a;
	public static int b;
	public static int c;
	public int d;
	private java.lang.Object e;
	private ()V setChunkModified;
	private final java.net.SocketAddress g;
	private java.io.DataInputStream h;
	private java.io.DataOutputStream i;
	private boolean j;
	private java.util.List k;
	private java.util.List l;
	private java.util.List m;
	private NetHandler n;
	private boolean o;
	private java.lang.Thread p;
	private java.lang.Thread q;
	private boolean r;
	private java.lang.String s;
	private java.lang.Object[] t;
	private int u;
	private int v;
	private int w;
	
	// METHODS
	
	/**
	 * Adds the packet to the correct send queue (chunk data packets go to a separate queue).
	 */
	 void addToSendQueue(Packet a);
	
	/**
	 * 
	 */
	public void a();
	
	/**
	 * 
	 */
	static boolean a(NetworkManager a);
	
	/**
	 * 
	 */
	public void a(NetHandler a);
	
	/**
	 * 
	 */
	private void a(java.lang.Exception a);
	
	/**
	 * 
	 */
	public transient void a(java.lang.String a, java.lang.Object[] b);
	
	/**
	 * 
	 */
	public void a(Packet a);
	
	/**
	 * Returns the socket address of the remote side. Server-only.
	 */
	 java.net.SocketAddress getRemoteAddress();
	
	/**
	 * 
	 */
	public java.net.SocketAddress b();
	
	/**
	 * 
	 */
	static boolean b(NetworkManager a);
	
	/**
	 * Static accessor to readPacket.
	 */
	 void readNetworkPacket(NetworkManager a);
	
	/**
	 * 
	 */
	public void c();
	
	/**
	 * 
	 */
	static void c(NetworkManager a);
	
	/**
	 * Returns the number of chunk data packets waiting to be sent.
	 */
	 int getNumChunkDataPackets();
	
	/**
	 * 
	 */
	public int d();
	
	/**
	 * 
	 */
	static void d(NetworkManager a);
	
	/**
	 * Returns the read thread.
	 */
	 java.lang.Thread getReadThread(NetworkManager a);
	
	/**
	 * 
	 */
	private void e();
	
	/**
	 * 
	 */
	static java.lang.Thread e(NetworkManager a);
	
	/**
	 * Returns the write thread.
	 */
	 java.lang.Thread getWriteThread(NetworkManager a);
	
	/**
	 * 
	 */
	private void f();
	
	/**
	 * 
	 */
	static java.lang.Thread f(NetworkManager a);

}
