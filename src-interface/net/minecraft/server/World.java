// AUTOMATICALLY GENERATED BY MIDDLECRAFT
/* Allows plugins to access server functions without needing to link the actual server Jar. */
package net.minecraft.server;

public abstract class World {
	// FIELDS
	private java.util.List field_821;
	private java.util.List field_790;
	private java.util.TreeSet scheduledTickTreeSet;
	private java.util.Set scheduledTickSet;
	private long field_6159;
	private long field_784;
	private IChunkProvider chunkProvider;
	private NBTTagCompound nbtCompoundPlayer;
	private java.util.ArrayList field_9207;
	private int field_4265;
	private java.util.Set field_4264;
	private int field_4263;
	private java.util.List field_778;
	public boolean field_4280;
	public java.util.List loadedEntityList;
	public java.util.List loadedTileEntityList;
	public java.util.List playerEntities;
	public long worldTime;
	public int skylightSubtracted;
	protected int field_4279;
	protected int field_4278;
	public boolean field_808;
	protected int autosavePeriod;
	public int monstersEnabled;
	public java.util.Random rand;
	public int spawnX;
	public int spawnY;
	public int spawnZ;
	public boolean field_9212;
	public final WorldProvider worldProvider;
	protected java.util.List worldAccesses;
	public java.io.File field_9211;
	public java.io.File field_797;
	public long randomSeed;
	public long sizeOnDisk;
	public final java.lang.String field_9210;
	public boolean field_9209;
	static int field_4268;
	public boolean multiplayerWorld;
	
	// METHODS
	
	/**
	 * 
	 */
	public abstract WorldChunkManager a();
	
	/**
	 * 
	 */
	public abstract EntityPlayer a(double a, double b, double c, double d);
	
	/**
	 * 
	 */
	public abstract void a(double a, double b, double c, java.lang.String d, float e, float f);
	
	/**
	 * 
	 */
	public abstract int a(float a);
	
	/**
	 * 
	 */
	public abstract int a(int a, int b);
	
	/**
	 * 
	 */
	public abstract int a(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract boolean a(int a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract boolean a(int a, int b, int c, int d, int e);
	
	/**
	 * 
	 */
	public abstract boolean a(int a, int b, int c, int d, int e, int f);
	
	/**
	 * 
	 */
	public abstract boolean a(int a, int b, int c, int d, boolean e);
	
	/**
	 * 
	 */
	public abstract void a(int a, int b, int c, TileEntity d);
	
	/**
	 * 
	 */
	public abstract int a(int a, int b, int c, boolean d);
	
	/**
	 * 
	 */
	public abstract MovingObjectPosition a(Vec3D a, Vec3D b);
	
	/**
	 * 
	 */
	public abstract MovingObjectPosition a(Vec3D a, Vec3D b, boolean c);
	
	/**
	 * 
	 */
	public abstract float a(Vec3D a, AxisAlignedBB b);
	
	/**
	 * 
	 */
	public abstract void a(IWorldAccess a);
	
	/**
	 * 
	 */
	public abstract int a(EnumSkyBlock a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract void a(EnumSkyBlock a, int b, int c, int d, int e);
	
	/**
	 * 
	 */
	public abstract void a(EnumSkyBlock a, int b, int c, int d, int e, int f, int g);
	
	/**
	 * 
	 */
	public abstract void a(EnumSkyBlock a, int b, int c, int d, int e, int f, int g, boolean h);
	
	/**
	 * 
	 */
	public abstract boolean a(AxisAlignedBB a);
	
	/**
	 * 
	 */
	public abstract boolean a(AxisAlignedBB a, Material b);
	
	/**
	 * 
	 */
	public abstract boolean a(AxisAlignedBB a, Material b, Entity c);
	
	/**
	 * 
	 */
	public abstract boolean a(Entity a);
	
	/**
	 * 
	 */
	public abstract void a(Entity a, byte b);
	
	/**
	 * 
	 */
	public abstract EntityPlayer a(Entity a, double b);
	
	/**
	 * 
	 */
	public abstract Explosion a(Entity a, double b, double c, double d, float e);
	
	/**
	 * 
	 */
	public abstract Explosion a(Entity a, double b, double c, double d, float e, boolean f);
	
	/**
	 * 
	 */
	public abstract PathEntity a(Entity a, int b, int c, int d, float e);
	
	/**
	 * 
	 */
	public abstract java.util.List a(Entity a, AxisAlignedBB b);
	
	/**
	 * 
	 */
	public abstract PathEntity a(Entity a, Entity b, float c);
	
	/**
	 * 
	 */
	public abstract void a(Entity a, java.lang.String b, float c, float d);
	
	/**
	 * 
	 */
	public abstract void a(Entity a, boolean b);
	
	/**
	 * 
	 */
	public abstract boolean a(EntityPlayer a, int b, int c, int d);
	
	/**
	 * 
	 */
	protected abstract IChunkProvider a(java.io.File a);
	
	/**
	 * 
	 */
	public abstract int a(java.lang.Class a);
	
	/**
	 * 
	 */
	public abstract java.util.List a(java.lang.Class a, AxisAlignedBB b);
	
	/**
	 * 
	 */
	public abstract void a(java.lang.String a, double b, double c, double d, double e, double f, double g);
	
	/**
	 * 
	 */
	public abstract void a(java.lang.String a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract void a(java.util.List a);
	
	/**
	 * 
	 */
	public abstract boolean a(boolean a);
	
	/**
	 * 
	 */
	public abstract void a(boolean a, IProgressUpdate b);
	
	/**
	 * 
	 */
	public abstract boolean b();
	
	/**
	 * 
	 */
	public abstract float b(float a);
	
	/**
	 * 
	 */
	public abstract Chunk b(int a, int b);
	
	/**
	 * 
	 */
	public abstract int b(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract void b(int a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract boolean b(int a, int b, int c, int d, int e);
	
	/**
	 * 
	 */
	public abstract void b(int a, int b, int c, int d, int e, int f);
	
	/**
	 * 
	 */
	public abstract void b(int a, int b, int c, TileEntity d);
	
	/**
	 * 
	 */
	public abstract void b(EnumSkyBlock a, int b, int c, int d, int e);
	
	/**
	 * 
	 */
	public abstract boolean b(AxisAlignedBB a);
	
	/**
	 * 
	 */
	public abstract boolean b(AxisAlignedBB a, Material b);
	
	/**
	 * 
	 */
	protected abstract void b(Entity a);
	
	/**
	 * 
	 */
	public abstract java.util.List b(Entity a, AxisAlignedBB b);
	
	/**
	 * 
	 */
	public abstract void b(java.util.List a);
	
	/**
	 * 
	 */
	public abstract void c();
	
	/**
	 * 
	 */
	public abstract Chunk c(int a, int b);
	
	/**
	 * 
	 */
	public abstract Material c(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract boolean c(int a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract byte[] c(int a, int b, int c, int d, int e, int f);
	
	/**
	 * 
	 */
	public abstract boolean c(AxisAlignedBB a);
	
	/**
	 * 
	 */
	protected abstract void c(Entity a);
	
	/**
	 * 
	 */
	public abstract boolean d();
	
	/**
	 * 
	 */
	public abstract int d(int a, int b);
	
	/**
	 * 
	 */
	public abstract boolean d(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract boolean d(int a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract void d(Entity a);
	
	/**
	 * 
	 */
	public abstract void e();
	
	/**
	 * 
	 */
	public abstract int e(int a, int b);
	
	/**
	 * 
	 */
	public abstract boolean e(int a, int b, int c);
	
	/**
	 * 
	 */
	protected abstract void e(int a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract void e(Entity a);
	
	/**
	 * 
	 */
	public abstract void f();
	
	/**
	 * 
	 */
	public abstract boolean f(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract void f(int a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract void f(Entity a);
	
	/**
	 * 
	 */
	protected abstract void g();
	
	/**
	 * 
	 */
	public abstract void g(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract void g(int a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract void h();
	
	/**
	 * 
	 */
	public abstract boolean h(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract void h(int a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract int i(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract boolean i(int a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract boolean j(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract boolean j(int a, int b, int c, int d);
	
	/**
	 * 
	 */
	public abstract float k(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract TileEntity l(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract void m(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract boolean n(int a, int b, int c);
	
	/**
	 * 
	 */
	public abstract boolean o(int a, int b, int c);

}
