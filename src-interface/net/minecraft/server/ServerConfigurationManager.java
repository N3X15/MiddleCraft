// AUTOMATICALLY GENERATED BY MIDDLECRAFT
/* Allows plugins to access server functions without needing to link the actual server Jar. */
package net.minecraft.server;

public abstract class ServerConfigurationManager {
	// FIELDS
	public static java.util.logging.Logger logger;
	public java.util.List playerEntities;
	private net.minecraft.server.MinecraftServer mcServer;
	private PlayerManager playerManagerObj;
	private int maxPlayers;
	private java.util.Set field_9252;
	private java.util.Set bannedIPs;
	private java.util.Set ops;
	private java.io.File bannedPlayersFile;
	private java.io.File ipBanFile;
	private java.io.File opFile;
	private PlayerNBTManager playerNBTManagerObj;
	
	// METHODS
	
	/**
	 * *
	 */
	public abstract int func_640();
	
	/**
	 * *
	 */
	public abstract void func_12022(double a, double b, double c, double d, Packet e);
	
	/**
	 * *
	 */
	public abstract void func_622(int a, int b, int c);
	
	/**
	 * sends a tilentity to the player name specified
	 */
	public abstract void sentTileEntityToPlayer(int a, int b, int c, TileEntity d);
	
	/**
	 * Called when a player successfully logs in. Reads player data from disk and inserts the player into the world.
	 */
	public abstract void playerLoggedIn(EntityPlayerMP a);
	
	/**
	 * Sets the NBT manager to the one for the worldserver given
	 */
	public abstract void setPlayerManager(WorldServer a);
	
	/**
	 * Called when a player tries to login. Checks whether they are banned/server is full etc.
	 */
	public abstract EntityPlayerMP login(NetLoginHandler a, java.lang.String b, java.lang.String c);
	
	/**
	 * adds a player to the ban list
	 */
	public abstract void banPlayer(java.lang.String a);
	
	/**
	 * sends a chat message to the player with the name specified (not necessarily a whisper)
	 */
	public abstract void sendChatMessageToPlayer(java.lang.String a, java.lang.String b);
	
	/**
	 * sends a packet to the player with the name specified
	 */
	public abstract boolean sendPacketToPlayer(java.lang.String a, Packet b);
	
	/**
	 * sends a packet to all players
	 */
	public abstract void sendPacketToAllPlayers(Packet a);
	
	/**
	 * *
	 */
	public abstract void func_637();
	
	/**
	 * *
	 */
	public abstract void func_613(EntityPlayerMP a);
	
	/**
	 * removes a player from the ban list
	 */
	public abstract void unbanPlayer(java.lang.String a);
	
	/**
	 * returns a string containing a comma-seperated list of player names
	 */
	public abstract java.lang.String getPlayerList();
	
	/**
	 * Called when a player disconnects from the game. Writes player data to disk and removes them from the world.
	 */
	public abstract void playerLoggedOut(EntityPlayerMP a);
	
	/**
	 * bans the given IP string
	 */
	public abstract void banIP(java.lang.String a);
	
	/**
	 * Saves all of the player's states
	 */
	public abstract void savePlayerStates();
	
	/**
	 * *
	 */
	public abstract EntityPlayerMP func_9242(EntityPlayerMP a);
	
	/**
	 * unbans the given IP string
	 */
	public abstract void unbanIP(java.lang.String a);
	
	/**
	 * ops the player given
	 */
	public abstract void opPlayer(java.lang.String a);
	
	/**
	 * deops the player given
	 */
	public abstract void deopPlayer(java.lang.String a);
	
	/**
	 * Returns true if the player is an OP, false otherwise.
	 */
	public abstract boolean isOp(java.lang.String a);
	
	/**
	 * gets the player entity for the player with the name specified
	 */
	public abstract EntityPlayerMP getPlayerEntity(java.lang.String a);
	
	/**
	 * sends a chat message to all players currently connected
	 */
	public abstract void sendChatMessageToAllPlayers(java.lang.String a);

}
