// AUTOMATICALLY GENERATED BY MIDDLECRAFT
/* Allows plugins to access server functions without needing to link the actual server Jar. */
package net.minecraft.server;

public abstract class IMobs{
	// FIELDS
	public boolean A;
	public boolean B;
	public boolean C;
	public boolean D;
	public boolean E;
	public boolean F;
	public boolean G;
	public float H;
	public float I;
	public float J;
	public float K;
	public float L;
	protected boolean M;
	protected float N;
	public double O;
	public double P;
	public double Q;
	public float R;
	public float S;
	public boolean T;
	public float U;
	public boolean V;
	protected java.util.Random W;
	public int X;
	public int Y;
	public int Z;
	private static int a;
	protected int aa;
	protected boolean ab;
	public int ac;
	public int ad;
	protected boolean ae;
	public boolean af;
	public int ag;
	public int ah;
	public int ai;
	private int b;
	private boolean c;
	private double d;
	private double e;
	public int g;
	public double h;
	public boolean i;
	public IMobs j;
	public IMobs k;
	public Packet17AddToInventory l;
	public double m;
	public double n;
	public double o;
	public double p;
	public double q;
	public double r;
	public double s;
	public double t;
	public double u;
	public float v;
	public float w;
	public float x;
	public float y;
	public final IUpdatePlayerListBox z;
	
	// METHODS
	
	/**
	 * 
	 */
	public void A()
	
	/**
	 * 
	 */
	public double B()
	
	/**
	 * 
	 */
	public NoiseGenerator2 C()
	
	/**
	 * 
	 */
	public void D()
	
	/**
	 * 
	 */
	public int[] E()
	
	/**
	 * Sets the x,y,z of the entity from the given parameters. Also seems to set up a bounding box.
	 */
	public void setPosition(double a, double b, double c)
	
	/**
	 * Takes in the distance the entity has fallen this tick and whether its on the ground to update the fall distance and deal fall damage if landing on the ground.  Args: distanceFallenThisTick, onGround
	 */
	protected void updateFallState(double a, boolean b)
	
	/**
	 * Called when the mob is falling. Calculates and applies fall damage.
	 */
	protected void fall(float a)
	
	/**
	 * Sets the width and height of the entity. Args: width, height
	 */
	protected void setSize(float a, float b)
	
	/**
	 * 
	 */
	public void a(float a, float b, float c)
	
	/**
	 * Drops an item stack with a specified y offset. Args: itemID, count, yOffset
	 */
	public MathHelper dropItemWithOffset(int a, int b, float c)
	
	/**
	 * (abstract) Protected helper method to write subclass entity data to NBT.
	 */
	protected abstract void writeEntityToNBT(Packet1Login a)
	
	/**
	 * Returns the distance to the entity. Args: entity
	 */
	public float getDistanceToEntity(IMobs a)
	
	/**
	 * Called when the entity is attacked.
	 */
	public boolean attackEntity(IMobs a, int b)
	
	/**
	 * 
	 */
	public boolean a(BlockLog a)
	
	/**
	 * Checks if the current block the entity is within of the specified material type
	 */
	public boolean isInsideOfMaterial(la a)
	
	/**
	 * 
	 */
	protected transient WorldManager a(double[] a)
	
	/**
	 * 
	 */
	protected transient WorldManager a(float[] a)
	
	/**
	 * *
	 */
	public boolean isOffsetPositionInLiquid(double a, double b, double c)
	
	/**
	 * Sets the entity's position and rotation. Args: posX, posY, posZ, yaw, pitch
	 */
	public void setPositionAndRotation(double a, double b, double c, float d, float e)
	
	/**
	 * Gets how bright this entity is.
	 */
	public float getEntityBrightness(float a)
	
	/**
	 * Sets the rotation of the entity
	 */
	protected void setRotation(float a, float b)
	
	/**
	 * Will deal the specified amount of damage to the entity if the entity isn't immune to fire damage. Args: amountDamage
	 */
	protected void dealFireDamage(int a)
	
	/**
	 * Drops an item stack at the entity's position. Args: itemID, count
	 */
	public MathHelper dropItem(int a, int b)
	
	/**
	 * (abstract) Protected helper method to read subclass entity data from NBT.
	 */
	protected abstract void readEntityFromNBT(Packet1Login a)
	
	/**
	 * Returns the squared distance to the entity. Args: entity
	 */
	public double getDistanceSqToEntity(IMobs a)
	
	/**
	 * *
	 */
	public void addToPlayerScore(IMobs a, int b)
	
	/**
	 * Called by a player entity when they collide with an entity
	 */
	public void onCollideWithPlayer(BlockLog a)
	
	/**
	 * Called to update the entity's position/logic.
	 */
	public void onUpdate()
	
	/**
	 * Tries to moves the entity by the passed in displacement. Args: x, y, z
	 */
	public void moveEntity(double a, double b, double c)
	
	/**
	 * *
	 */
	public void setLocationAndAngles(double a, double b, double c, float d, float e)
	
	/**
	 * 
	 */
	public boolean c(Packet1Login a)
	
	/**
	 * Applies a velocity to each of the entities pushing them away from each other. Args: entity
	 */
	public void applyEntityCollision(IMobs a)
	
	/**
	 * *
	 */
	public boolean canBeCollidedWith()
	
	/**
	 * Gets the squared distance to the position. Args: x, y, z
	 */
	public double getDistanceSq(double a, double b, double c)
	
	/**
	 * Save the entity to NBT (calls an abstract helper method to write extra data)
	 */
	public void writeToNBT(Packet1Login a)
	
	/**
	 * 
	 */
	public IUpdatePlayerListBox d(IMobs a)
	
	/**
	 * Gets the distance to the position. Args: x, y, z
	 */
	public double getDistance(double a, double b, double c)
	
	/**
	 * Reads the entity from NBT (calls an abstract helper method to read specialized data)
	 */
	public void readFromNBT(Packet1Login a)
	
	/**
	 * set entity to null to unmount
	 */
	public void mountEntity(IMobs a)
	
	/**
	 * 
	 */
	public boolean equals(java.lang.Object a)
	
	/**
	 * Adds to the current velocity of the entity. Args: x, y, z
	 */
	public void addVelocity(double a, double b, double c)
	
	/**
	 * 
	 */
	public int hashCode()
	
	/**
	 * 
	 */
	public double j()
	
	/**
	 * Will get destroyed next tick
	 */
	public void setEntityDead()
	
	/**
	 * 
	 */
	public void m()
	
	/**
	 * Called whenever the entity is walking inside of lava.
	 */
	protected void setOnFireFromLava()
	
	/**
	 * 
	 */
	protected void o()
	
	/**
	 * Returns if this entity is sneaking.
	 */
	public boolean isSneaking()
	
	/**
	 * 
	 */
	public IUpdatePlayerListBox q()
	
	/**
	 * Returns if this entity is in water and will end up adding the waters velocity to the entity
	 */
	public boolean handleWaterMovement()
	
	/**
	 * 
	 */
	public float s()
	
	/**
	 * *
	 */
	public boolean handleLavaMovement()
	
	/**
	 * 
	 */
	protected void u()
	
	/**
	 * *
	 */
	public boolean canBePushed()
	
	/**
	 * *
	 */
	protected final java.lang.String getEntityString()
	
	/**
	 * *
	 */
	public boolean isEntityAlive()
	
	/**
	 * 
	 */
	public boolean y()
	
	/**
	 * 
	 */
	public void z()

}
